#include <iostream>
#include <Windows.h>
#include <TlHelp32.h>
#include <string>
#include <vector>
#include <thread>
#include "functions.h"
using namespace std;
string input;
DWORD GetProcessID(const wchar_t* processName)
{
    DWORD process_ID = 0;
    HANDLE handleSnap = (CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0));

    if (handleSnap != INVALID_HANDLE_VALUE) {
        PROCESSENTRY32 procEntry;
        procEntry.dwSize = sizeof(procEntry);

        if (Process32First(handleSnap, &procEntry)) {
            do {
                if (!_wcsicmp(procEntry.szExeFile, processName)) {
                    process_ID = procEntry.th32ProcessID;
                    break;
                }
            } while (Process32Next(handleSnap, &procEntry));
        }
    }
    else {
        CloseHandle(handleSnap);
        return process_ID;
    }

    CloseHandle(handleSnap);
    return process_ID;
}

void FindAndReplaceBytes(DWORD processId, const std::vector<BYTE>& findSignature, const std::vector<BYTE>& replaceSignature) {
    HANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId);
    if (processHandle == NULL) {
        DWORD errorCode = GetLastError();
        std::cout << "Failed to open process. Error code: " << errorCode << std::endl;
        return;
    }

    SYSTEM_INFO systemInfo;
    GetSystemInfo(&systemInfo);
    MEMORY_BASIC_INFORMATION memoryInfo;

    DWORD_PTR currentAddress = (DWORD_PTR)0x0000000000000000;
    while (currentAddress < (DWORD_PTR)0x00007fffffffffff) {
        if (VirtualQueryEx(processHandle, (LPCVOID)currentAddress, &memoryInfo, sizeof(memoryInfo))) {
            if (memoryInfo.State == MEM_COMMIT && (memoryInfo.Protect == PAGE_READWRITE || memoryInfo.Protect == PAGE_EXECUTE_READWRITE)) {
                std::vector<BYTE> buffer(memoryInfo.RegionSize);
                SIZE_T bytesRead;

                LPVOID baseAddress = memoryInfo.BaseAddress;
                if (ReadProcessMemory(processHandle, baseAddress, buffer.data(), memoryInfo.RegionSize, &bytesRead)) {
                    if (bytesRead >= findSignature.size()) {
                        for (std::size_t i = 0; i < bytesRead - findSignature.size(); ++i) {
                            bool found = true;
                            for (std::size_t j = 0; j < findSignature.size(); ++j) {
                                if (buffer[i + j] != findSignature[j]) {
                                    found = false;
                                    break;
                                }
                            }

                            if (found) {
                                if (!WriteProcessMemory(processHandle, (LPVOID)(reinterpret_cast<DWORD_PTR>(baseAddress) + i), replaceSignature.data(), replaceSignature.size(), nullptr)) {
                                    DWORD errorCode = GetLastError();
                                    std::cout << "Failed to write to process memory. Error code: " << errorCode << std::endl;
                                }
                            }
                        }
                    }
                }
            }
        }
        currentAddress += memoryInfo.RegionSize;
    }

    CloseHandle(processHandle);
}

void enableBlackSky(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x0A, 0xD7, 0x23, 0x3C, 0xBD, 0x37, 0x86, 0x35, 0x70, 0x40, 0x2D, 0xE9, 0x24, 0x00, 0x90, 0xE5, 0x00, 0x00, 0x50, 0xE3 };
    std::vector<BYTE> replaceSignature = { 0x00, 0x00, 0x80, 0xBF, 0xBD, 0x37, 0x86, 0x35, 0x70, 0x40, 0x2D, 0xE9, 0x24, 0x00, 0x90, 0xE5, 0x00, 0x00, 0x50, 0xE3 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void disableBlackSky(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x00, 0x00, 0x80, 0xBF, 0xBD, 0x37, 0x86, 0x35, 0x70, 0x40, 0x2D, 0xE9, 0x24, 0x00, 0x90, 0xE5, 0x00, 0x00, 0x50, 0xE3 };
    std::vector<BYTE> replaceSignature = { 0x0A, 0xD7, 0x23, 0x3C, 0xBD, 0x37, 0x86, 0x35, 0x70, 0x40, 0x2D, 0xE9, 0x24, 0x00, 0x90, 0xE5, 0x00, 0x00, 0x50, 0xE3 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void enableFOV(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x00, 0x00, 0xB4, 0x43, 0xDB, 0x0F, 0x49, 0x40, 0x10, 0x2A, 0x00, 0xEE, 0x00, 0x10, 0x80, 0xE5, 0x10, 0x3A, 0x01, 0xEE, 0x14, 0x10, 0x80, 0xE5, 0x00 };
    std::vector<BYTE> replaceSignature = { 0x00, 0x00, 0x34, 0x43, 0xDB, 0x0F, 0x49, 0x40, 0x10, 0x2A, 0x00, 0xEE, 0x00, 0x10, 0x80, 0xE5, 0x10, 0x3A, 0x01, 0xEE, 0x14, 0x10, 0x80, 0xE5, 0x00 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void MoveON(DWORD processId) {
    std::vector<BYTE> findSignature = { 0xF0, 0x48, 0x2D, 0xE9, 0x9C, 0x60, 0x9F, 0xE5, 0x00, 0x50, 0xA0, 0xE1, 0x01, 0x40, 0xA0, 0xE1, 0x06, 0x60, 0x8F, 0xE0, 0x00, 0x00, 0xD6, 0xE5, 0x00, 0x00, 0x50, 0xE3 };
    std::vector<BYTE> replaceSignature = { 0x1E, 0xFF, 0x2F, 0xE1, 0x9C, 0x60, 0x9F, 0xE5, 0x00, 0x50, 0xA0, 0xE1, 0x01, 0x40, 0xA0, 0xE1, 0x06, 0x60, 0x8F, 0xE0, 0x00, 0x00, 0xD6, 0xE5, 0x00, 0x00, 0x50, 0xE3 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void MoveOFF(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x1E, 0xFF, 0x2F, 0xE1, 0x9C, 0x60, 0x9F, 0xE5, 0x00, 0x50, 0xA0, 0xE1, 0x01, 0x40, 0xA0, 0xE1, 0x06, 0x60, 0x8F, 0xE0, 0x00, 0x00, 0xD6, 0xE5, 0x00, 0x00, 0x50, 0xE3 };
    std::vector<BYTE> replaceSignature = { 0xF0, 0x48, 0x2D, 0xE9, 0x9C, 0x60, 0x9F, 0xE5, 0x00, 0x50, 0xA0, 0xE1, 0x01, 0x40, 0xA0, 0xE1, 0x06, 0x60, 0x8F, 0xE0, 0x00, 0x00, 0xD6, 0xE5, 0x00, 0x00, 0x50, 0xE3 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void disableFOV(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x00, 0x00, 0x34, 0x43, 0xDB, 0x0F, 0x49, 0x40, 0x10, 0x2A, 0x00, 0xEE, 0x00, 0x10, 0x80, 0xE5, 0x10, 0x3A, 0x01, 0xEE, 0x14, 0x10, 0x80, 0xE5, 0x00 };
    std::vector<BYTE> replaceSignature = { 0x00, 0x00, 0xB4, 0x43, 0xDB, 0x0F, 0x49, 0x40, 0x10, 0x2A, 0x00, 0xEE, 0x00, 0x10, 0x80, 0xE5, 0x10, 0x3A, 0x01, 0xEE, 0x14, 0x10, 0x80, 0xE5, 0x00 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void EnableRadar(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x00, 0x00, 0x50, 0xE3, 0x08, 0x00, 0x00, 0x0A, 0x40, 0x00, 0xDA, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x3E };
    std::vector<BYTE> replaceSignature = { 0x01, 0x00, 0x50, 0xE3, 0x08, 0x00, 0x00, 0x0A, 0x40, 0x00, 0xDA, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x3E };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void DisableRadar(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x01, 0x00, 0x50, 0xE3, 0x08, 0x00, 0x00, 0x0A, 0x40, 0x00, 0xDA, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x3E };
    std::vector<BYTE> replaceSignature = { 0x00, 0x00, 0x50, 0xE3, 0x08, 0x00, 0x00, 0x0A, 0x40, 0x00, 0xDA, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x3E };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void EnableHead(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x10, 0x40, 0x2D, 0xE9, 0x14, 0x40, 0x90, 0xE5, 0x00, 0x00, 0x54, 0xE3, 0x01, 0x00, 0x00, 0x0A, 0x08, 0x00, 0x94, 0xE5, 0x10, 0x80 };
    std::vector<BYTE> replaceSignature = { 0x00, 0x00, 0xA0, 0xE3, 0x1E, 0xFF, 0x2F, 0xE1, 0x00, 0x00, 0x54, 0xE3, 0x01, 0x00, 0x00, 0x0A, 0x08, 0x00, 0x94, 0xE5, 0x10, 0x80 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void DisableHead(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x00, 0x00, 0xA0, 0xE3, 0x1E, 0xFF, 0x2F, 0xE1, 0x00, 0x00, 0x54, 0xE3, 0x01, 0x00, 0x00, 0x0A, 0x08, 0x00, 0x94, 0xE5, 0x10, 0x80 };
    std::vector<BYTE> replaceSignature = { 0x10, 0x40, 0x2D, 0xE9, 0x14, 0x40, 0x90, 0xE5, 0x00, 0x00, 0x54, 0xE3, 0x01, 0x00, 0x00, 0x0A, 0x08, 0x00, 0x94, 0xE5, 0x10, 0x80 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void EnableAim(DWORD processId) {
    std::vector<BYTE> findSignature = { 0xAC, 0xC5, 0x27, 0x37, 0xB0, 0xB5, 0x0C, 0x46, 0x06, 0x49, 0x05, 0x46, 0xE0, 0x69, 0x79, 0x44, 0xFD };
    std::vector<BYTE> replaceSignature = { 0xEC, 0x51, 0x38, 0x3E, 0xB0, 0xB5, 0x0C, 0x46, 0x06, 0x49, 0x05, 0x46, 0xE0, 0x69, 0x79, 0x44, 0xFD };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void DisableAim(DWORD processId) {
    std::vector<BYTE> findSignature = { 0xEC, 0x51, 0x38, 0x3E, 0xB0, 0xB5, 0x0C, 0x46, 0x06, 0x49, 0x05, 0x46, 0xE0, 0x69, 0x79, 0x44, 0xFD };
    std::vector<BYTE> replaceSignature = { 0xAC, 0xC5, 0x27, 0x37, 0xB0, 0xB5, 0x0C, 0x46, 0x06, 0x49, 0x05, 0x46, 0xE0, 0x69, 0x79, 0x44, 0xFD };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void EnableRec(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x00, 0x00, 0xB4, 0x43, 0xDB, 0x0F, 0x49, 0x40, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xB5, 0x03, 0xAF, 0x93, 0xB0, 0x6C, 0x46, 0x6F, 0xF3, 0x03, 0x04, 0xA5, 0x46, 0x06, 0x46 };
    std::vector<BYTE> replaceSignature = { 0x00, 0x00, 0x34, 0x44, 0xDB, 0x0F, 0x49, 0x40, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xB5, 0x03, 0xAF, 0x93, 0xB0, 0x6C, 0x46, 0x6F, 0xF3, 0x03, 0x04, 0xA5, 0x46, 0x06, 0x46 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void DisableRec(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x00, 0x00, 0x34, 0x44, 0xDB, 0x0F, 0x49, 0x40, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xB5, 0x03, 0xAF, 0x93, 0xB0, 0x6C, 0x46, 0x6F, 0xF3, 0x03, 0x04, 0xA5, 0x46, 0x06, 0x46 };
    std::vector<BYTE> replaceSignature = { 0x00, 0x00, 0xB4, 0x43, 0xDB, 0x0F, 0x49, 0x40, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xB5, 0x03, 0xAF, 0x93, 0xB0, 0x6C, 0x46, 0x6F, 0xF3, 0x03, 0x04, 0xA5, 0x46, 0x06, 0x46 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void AddScoreON(DWORD processId) {
    std::vector<BYTE> findSignature = { 0xD0, 0x4D, 0xE2, 0x4C, 0x61, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1, 0x01, 0x50, 0xA0, 0xE1, 0x06, 0x60, 0x8F, 0xE0, 0x00, 0x00, 0xD6, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x0D, 0x00, 0x00, 0x1A, 0x34, 0x01, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7 };
    std::vector<BYTE> replaceSignature = { 0xD0, 0x4D, 0xE2, 0x4C, 0x61, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1, 0xC8, 0x50, 0x00, 0xE3, 0x06, 0x60, 0x8F, 0xE0, 0x00, 0x00, 0xD6, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x0D, 0x00, 0x00, 0x1A, 0x34, 0x01, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void AddScoreOFF(DWORD processId) {
    std::vector<BYTE> findSignature = { 0xD0, 0x4D, 0xE2, 0x4C, 0x61, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1, 0xC8, 0x50, 0x00, 0xE3, 0x06, 0x60, 0x8F, 0xE0, 0x00, 0x00, 0xD6, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x0D, 0x00, 0x00, 0x1A, 0x34, 0x01, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7 };
    std::vector<BYTE> replaceSignature = { 0xD0, 0x4D, 0xE2, 0x4C, 0x61, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1, 0x01, 0x50, 0xA0, 0xE1, 0x06, 0x60, 0x8F, 0xE0, 0x00, 0x00, 0xD6, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x0D, 0x00, 0x00, 0x1A, 0x34, 0x01, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7 };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void InfinityON(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x30, 0x48, 0x2D, 0xE9, 0x58, 0x50, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1, 0x05, 0x50, 0x8F, 0xE0, 0x00, 0x00, 0xD5, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x07, 0x00, 0x00, 0x1A, 0x44, 0x00, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7, 0x58, 0xFA, 0x08, 0xEB, 0x3C, 0x00, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7, 0x55, 0xFA, 0x08, 0xEB };
    std::vector<BYTE> replaceSignature = { 0x01, 0x02, 0xA0, 0xE3, 0x1E, 0xFF, 0x2F, 0xE1, 0x00, 0x40, 0xA0, 0xE1, 0x05, 0x50, 0x8F, 0xE0, 0x00, 0x00, 0xD5, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x07, 0x00, 0x00, 0x1A, 0x44, 0x00, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7, 0x58, 0xFA, 0x08, 0xEB, 0x3C, 0x00, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7, 0x55, 0xFA, 0x08, 0xEB };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}

void InfinityOFF(DWORD processId) {
    std::vector<BYTE> findSignature = { 0x01, 0x02, 0xA0, 0xE3, 0x1E, 0xFF, 0x2F, 0xE1, 0x00, 0x40, 0xA0, 0xE1, 0x05, 0x50, 0x8F, 0xE0, 0x00, 0x00, 0xD5, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x07, 0x00, 0x00, 0x1A, 0x44, 0x00, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7, 0x58, 0xFA, 0x08, 0xEB, 0x3C, 0x00, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7, 0x55, 0xFA, 0x08, 0xEB };
    std::vector<BYTE> replaceSignature = { 0x30, 0x48, 0x2D, 0xE9, 0x58, 0x50, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1, 0x05, 0x50, 0x8F, 0xE0, 0x00, 0x00, 0xD5, 0xE5, 0x00, 0x00, 0x50, 0xE3, 0x07, 0x00, 0x00, 0x1A, 0x44, 0x00, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7, 0x58, 0xFA, 0x08, 0xEB, 0x3C, 0x00, 0x9F, 0xE5, 0x00, 0x00, 0x9F, 0xE7, 0x55, 0xFA, 0x08, 0xEB };

    FindAndReplaceBytes(processId, findSignature, replaceSignature);
}




int main()
{
    DWORD id = GetProcessID(L"HD-Player.exe");
    cout << "Name process: Standoff2 (HD-Player.exe)(00007FF7EC40ACA8)" << endl;
    cout << "pID: " << id << endl;
    for (const auto& func : Function) {
        printf("%s\n", func.c_str());
    }
    /*   ***SIMPLE EXAMPLE***
    cin >> input;
    while (true) {
        cin >> input;
        if (input == "6") {
            enableBlackSky(id);
            printf("Black sky Enabled");

        }
        else if (input == "6-") {
            DisableAim(id);
            printf("Aimbot Disabled");

        }
        if (input == "0") {
            break;
        }
    }*/


    return 0;

}